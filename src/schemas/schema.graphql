

type Query {
"obtenemos los usuarios"
  users:[User!]!

  "Obtenemos la lista de todas las actividades"
   getActivities:[Activity!]!
   
  "obtenemos la lista de los instructores"
   getInstructors:[Instructor!]!

  "obtenemos un solo usuario"
   getUser(_id:ID!):User!
   
   "obtenemos un instructor"
   getInstructor(_id:ID!):Instructor!

   "obtenemos una actividad"
   getOneActivity(_id:ID!):Activity!

}

 type Mutation{

  "insertamos un usuario nuevo"
   insertUser(user:UserInput!) : insertOneUser!

  "insertamos un instructor nuevo"
  insertInstructor( instructor: InstructorInput!) : insertOneInstructor!

  "insertamos una actividad nueva"
  insertActivity(activity:ActivityInput): insertOneActivity!

 "actualizamos un usuario"
  updateUser (_id: ID!, user:UserInput) : ResultOperation!

  "actualizamos un instructor"
  updateInstructor( instructor: UserInput) : Instructor!

  "actualizamos una actividad nueva"
  updateActivity(activity:ActivityInput): Activity!

  "borramos un usuario"
  deleteUser(user:UserInput):User!

  "borramos un instructor"
  deleteInstructor( instructor: UserInput) : Instructor!

  "borramos una actividad nueva"
  deleteActivity(activity:ActivityInput): Activity!

}

# este es solo para obtener todos los usuarios
type User {
    _id:ID
    name:String!
    lastName:String!
    registerDate:String
    activities:[Activity!]!
}
# este es para insertar un usuario
type insertOneUser {
    name:String!
    lastName:String!
    registerDate:String
    activities:String!
}

type ResultOperation {
    status:Boolean!
    message:String!
    user:User!
}
# para que podamos insertar si te das cuenta en lugar de recibir un array recibe un string
input UserInput{
  name:String!
  lastName:String!
  activities:String!
}

# sirve para obtener a todos los instructores
type Instructor{
  _id:ID
  name:String!
  lastName:String!
  registerDate:String
  activities:[Activity!]!
}
# sirve para poder a√±adir a los instructores
input InstructorInput {
  name:String!
  lastName:String!
  activities:String!
}

# para que podamos insertar si te das cuenta en lugar de recibir un array recibe un string
type insertOneInstructor{
  name:String!
  lastName:String!
  registerDate:String
  activities:String!
}


input ActivityInput {
  activitiesName:String!
  instructor:String!
}

type Activity {
  _id:ID
  activitiesName:String!
  registerDate:String
  instructor:[Instructor]!
}

type insertOneActivity {
  activitiesName:String!
  registerDate:String
  instructor:String!
}